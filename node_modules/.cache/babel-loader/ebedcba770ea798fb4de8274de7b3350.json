{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Development\\\\WeatherApp\\\\src\\\\components\\\\getWeatherByCity.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { CurrentWheather } from '../models/currentWeather';\nimport { WeatherFor6DaysHourly } from '../models/weatherFor6DaysHourly';\nimport { WeatherForHour } from '../models/weatherForHour';\nimport { fetchLatAndLon, fetchCurrentWeather, fetchNextDaysHourlyWeather } from '../services/service';\nimport DrawWeather from './drawWeather';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GetWeatherByCity(props) {\n  _s();\n\n  const [curWheather, setCurWheather] = useState(new CurrentWheather());\n  const [weather5DaysHourly, setWeather5DaysHourly] = useState(new WeatherFor6DaysHourly());\n  const [weather5Days, setWeather5Days] = useState([new WeatherForHour()]);\n  const [chosenCity, setChosenCity] = useState('');\n  const {\n    city\n  } = useParams();\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (city !== '' && city !== undefined) {\n      setChosenCity(city);\n    }\n  }, [city]);\n  useEffect(() => {\n    if (chosenCity !== '') {\n      chooseCity();\n    }\n  }, [chosenCity]);\n\n  const chooseCity = async () => {\n    const data = await fetchLatAndLon(chosenCity);\n\n    if (data != null) {\n      await getWeather(data.lat, data.lon);\n    } else {\n      setCurWheather(new CurrentWheather());\n    }\n  };\n\n  const getWeather = async (lat, lon) => {\n    const data = await fetchCurrentWeather(lat, lon);\n    setCurWheather(data);\n    const data2 = await fetchNextDaysHourlyWeather(lat, lon);\n    setWeather5DaysHourly(data2);\n  };\n\n  useEffect(() => {\n    if (weather5DaysHourly.cod === \"200\") {\n      setWeather5Days(weather5DaysHourly.list.filter(weather => weather.dt_txt.includes(\"12:00:00\")));\n    }\n  }, [weather5DaysHourly]);\n\n  const navigateToMain = () => {\n    navigate('/');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [curWheather.cod === 200 ? /*#__PURE__*/_jsxDEV(DrawWeather, {\n      weather: curWheather,\n      cityName: chosenCity,\n      curWeather: true,\n      className: 'drawWeather curWeather'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"no city chosen or city isn't correct\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: navigateToMain,\n      children: \"See The Weather In Another City\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"days\",\n      children: weather5Days.length >= 5 && weather5Days.map(weather => /*#__PURE__*/_jsxDEV(DrawWeather, {\n        weather: weather,\n        cityName: chosenCity,\n        curWeather: false,\n        className: 'drawWeather nextDayWeather'\n      }, weather.dt_txt, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 50\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GetWeatherByCity, \"YOATo9KEU4kZqmbFyisJv9Q1Uro=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = GetWeatherByCity;\nexport default GetWeatherByCity;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetWeatherByCity\");","map":{"version":3,"sources":["C:/Users/user/Development/WeatherApp/src/components/getWeatherByCity.tsx"],"names":["React","useEffect","useState","useNavigate","useParams","CurrentWheather","WeatherFor6DaysHourly","WeatherForHour","fetchLatAndLon","fetchCurrentWeather","fetchNextDaysHourlyWeather","DrawWeather","GetWeatherByCity","props","curWheather","setCurWheather","weather5DaysHourly","setWeather5DaysHourly","weather5Days","setWeather5Days","chosenCity","setChosenCity","city","navigate","undefined","chooseCity","data","getWeather","lat","lon","data2","cod","list","filter","weather","dt_txt","includes","navigateToMain","length","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { CurrentWheather } from '../models/currentWeather';\r\nimport { WeatherFor6DaysHourly } from '../models/weatherFor6DaysHourly';\r\nimport { WeatherForHour } from '../models/weatherForHour';\r\nimport { fetchLatAndLon, fetchCurrentWeather, fetchNextDaysHourlyWeather } from '../services/service';\r\nimport DrawWeather from './drawWeather';\r\n\r\nfunction GetWeatherByCity(props) {\r\n    const [curWheather, setCurWheather] = useState(new CurrentWheather)\r\n    const [weather5DaysHourly, setWeather5DaysHourly] = useState(new WeatherFor6DaysHourly)\r\n    const [weather5Days, setWeather5Days] = useState([new WeatherForHour])\r\n    const [chosenCity, setChosenCity] = useState('');\r\n    const { city } = useParams();\r\n    const navigate = useNavigate();\r\n    \r\n    useEffect(() => {\r\n        if (city !== '' && city !== undefined) {\r\n            setChosenCity(city);\r\n        }\r\n    }, [city])\r\n    useEffect(() => {\r\n        if (chosenCity !== '') {\r\n            chooseCity();\r\n        }\r\n    }, [chosenCity])\r\n    const chooseCity = async () => {\r\n        const data = await fetchLatAndLon(chosenCity);\r\n        if (data != null) {\r\n            await getWeather(data.lat, data.lon)\r\n        }\r\n        else {\r\n            setCurWheather(new CurrentWheather);\r\n        }\r\n    }\r\n    const getWeather = async (lat: number, lon: number) => {\r\n        const data = await fetchCurrentWeather(lat, lon);\r\n        setCurWheather(data);\r\n        const data2 = await fetchNextDaysHourlyWeather(lat, lon);\r\n        setWeather5DaysHourly(data2);\r\n    }\r\n    useEffect(() => {\r\n        if (weather5DaysHourly.cod === \"200\") {\r\n            setWeather5Days(weather5DaysHourly.list.filter(weather => weather.dt_txt.includes(\"12:00:00\")));\r\n        }\r\n    }, [weather5DaysHourly])\r\n    const navigateToMain=()=>{\r\n        navigate('/');\r\n    }\r\n    return (\r\n        <div>\r\n            {curWheather.cod === 200 ?\r\n                <DrawWeather weather={curWheather} cityName={chosenCity} curWeather={true} className={'drawWeather curWeather'} />\r\n                : <p>no city chosen or city isn't correct</p>}\r\n            <button onClick={navigateToMain}>See The Weather In Another City</button>\r\n            <div className='days'>\r\n                {weather5Days.length >= 5 &&\r\n                    weather5Days.map(weather => (<DrawWeather\r\n                        key={weather.dt_txt}\r\n                        weather={weather} cityName={chosenCity}\r\n                        curWeather={false}\r\n                        className={'drawWeather nextDayWeather'} />))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GetWeatherByCity\r\n"]},"metadata":{},"sourceType":"module"}